% layout 'default';
<body>
  <style>
  </style>
  <div class="container">
    <div class="row">
      %= include 'components/menu';  
      <div id="chart" style="border: thin solid grey" class="col-md-8 col-md-offset-0">
      </div>
      <div id="sidebar" class="col-md-4 col-md-offset-0">
	<div id="detail">
	</div>
	<div id="debug">
	  <pre>
	  </pre>
	</div>
	<div id="changed">
	  <pre>
	  </pre>
	</div>
      </div>
    </div>
  </div>
</body>
<script>
  $(function(){
      var u = new URI;
      var s = u.search(true);
      %= include 'components/foobar', format => 'js';  
      var source   = document.getElementById("sidebar-template").innerHTML;
      var template = Handlebars.compile(source);
      $('#detail').html(template({ data : q }));
      $('.slider').each(function(i, e){
	  $(e).slider({ formatter: function(value) { return 'Current value: ' + value; }, value: 0 })
	      .on('change', function(e){ $(this).next().html(e.value.newValue) })
      })
      
      var w = $('#chart').width(),
	  h = window.innerHeight - $('#chart').position().top - $(window).height() * 0.30,
	  pad = 50; // defining width and height of the SVG element; and a little padding for the plot

      var svg = d3.select("#chart") // Select the plot element from the DOM
	  .append("svg") // Append an SVG element to it
	  .attr("height", h)
	  .attr("width", w);

      const dataset = [
	  {"x_size":30,"x_val":5,"y_val":20},
	  {"x_size":20,"x_val":48,"y_val":90},
	  {"x_size":100,"x_val":25,"y_val":50},
	  {"x_size":40,"x_val":10,"y_val":33},
	  {"x_size":60,"x_val":33,"y_val":85}
      ];

      // Create the scales and axes.
      
      // Scales
      var xScale = d3.scaleLinear() // For the X axis
	  .domain([s.x_min, s.x_max])
	  .range([pad, w - pad]);
      
      var yScale = d3.scaleLinear() // For the Y axis
	  .domain([s.x_min, s.y_max])
	  .range([h - pad, pad]);
      
      var rScale = d3.scaleLinear() // Custom scale for the radii
	  .domain([s.x_size_min, s.x_size_max])
	  .range([1, 100]); // Custom range, change it to see the effects!
      
      // Axes
      var xAxis = d3.axisBottom(xScale); // handy axes for any orientation
      var yAxis = d3.axisLeft(yScale);
      

      //-----------------------------------------------------------------
      // dragging
      //-----------------------------------------------------------------

      var u = new URI;
      function dragstarted(d, i) {
	  console.log(d)
	  d3.select(this).raise().classed("active", true);
      }
      
      function dragged(d, i) {
	  // console.log(d3.event);
	  console.log(i);
	  var s = u.search(true);
	  if (d3.event.sourceEvent.shiftKey) {
	      var r = Math.min(s.x_size_max, Math.max(s.x_size_min, Math.abs(d3.select(this).attr("cx") - d3.event.x)));
	      d3.select(this).attr("r", r)
	      d.x_size = rScale.invert($(this).attr('r'));	      
	      $('#x_size_val').slider('setValue', d.x_size).next().html(parseInt(d.x_size));
	  } else {
	      d3.select(this).attr("cx", d3.event.x).attr("cy", d3.event.y);
	      d.x_val = xScale.invert($(this).attr('cx'));
	      $('#x_val').slider('setValue', d.x_val).next().html(parseInt(d.x_val));
	      d.y_val = yScale.invert($(this).attr('cy'));	      
	      $('#y_val').slider('setValue', d.y_val).next().html(parseInt(d.y_val));
	  }
	  console.log(d)
	  var h = Object.assign(s, d)
	  history.replaceState(h, "page", u.search(h).toString());
      }
      
      function dragended(d, i) {
	  d3.select(this).classed("active", false);
	  console.log(d)
      }

      function itemclick(d, i){
	  $('#x_size_val').slider('setValue', d.x_size).next().html(parseInt(d.x_size));
	  $('#x_val').slider('setValue', d.x_val).next().html(parseInt(d.x_val));
	  $('#y_val').slider('setValue', d.y_val).next().html(parseInt(d.y_val));
      }
      
      //-----------------------------------------------------------------
      // Plotting the data.
      //-----------------------------------------------------------------
	  
      var circ = svg.selectAll("circle") // Returns ALL matching elements
	  .data(dataset)                 // Bind data to DOM
	  .enter()                       // Add one circle per such data point
	  .append("circle")
	  .attr("cx", function(d) { return xScale(d.x_val); })
	  .attr("cy", function(d) { return yScale(d.y_val); })
	  .attr("r", function(d)  { return rScale(d.x_size); })
	  .attr("fill", "blue").attr("opacity", 0.5)
	  .on('click', itemclick)
	  .call(d3.drag()
		.on("start", dragstarted)
		.on("drag", dragged)
		.on("end", dragended));
      
      //-----------------------------------------------------------------
      // dumping the data
      //-----------------------------------------------------------------

      $('#data_dropdown_menu .save').click(function(e){
	  svg.selectAll("circle").each(function(e){
	      console.log(e);
	      console.log([
		  xScale.invert($(this).attr('cx')),
		  yScale.invert($(this).attr('cy')),
		  rScale.invert($(this).attr('r'))
	      ]);
	  })
      })
      ;      
  })
</script>
%= include 'components/chart_sidebar';
